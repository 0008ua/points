{"version":3,"file":"src_app_modules_games_game_game_module_ts.js","mappings":"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","sources":["./src/app/modules/auth/deactivate-route.guard.ts","./src/app/modules/common/action-confirm/action-confirm.component.ts","./src/app/modules/common/shared.module.ts","./src/app/modules/games/game/game-routing.module.ts","./src/app/modules/games/game/game.module.ts","./src/app/modules/games/game/game.page.ts","./src/app/modules/games/gamers/choose-players/choose-players.component.ts","./src/app/modules/games/gamers/create-gamer/create-gamer.component.ts","./src/app/modules/games/gamers/gamers.module.ts","./src/app/modules/games/gamers/select-color/select-color.component.ts","./src/app/modules/games/games.service.ts","./src/app/modules/games/round/round-interfaces.ts","./src/app/modules/games/round/round-t-wrapper/round-t-wrapper.component.ts","./src/app/modules/games/round/round-wrapper/round-wrapper.component.ts","./src/app/modules/games/round/round.component.ts","./src/app/modules/games/round/round.directive.ts","./src/app/modules/games/round/round.module.ts","./src/app/modules/games/round/rummy/round-rummy/round-rummy.component.ts","./src/app/modules/games/round/thousand/round-thousand/round-thousand.component.ts","./src/app/modules/games/round/train/round-cars/round-cars.component.ts","./src/app/modules/games/round/train/round-length/round-length.component.ts","./src/app/modules/games/round/train/round-routes/round-routes.component.ts","./src/app/modules/games/round/train/round-stations/round-stations.component.ts","./src/app/modules/games/round/uno/round-uno/round-uno.component.ts","./src/app/modules/common/action-confirm/action-confirm.component.html","./src/app/modules/games/game/game.page.html","./src/app/modules/games/gamers/choose-players/choose-players.component.html","./src/app/modules/games/gamers/create-gamer/create-gamer.component.html","./src/app/modules/games/gamers/select-color/select-color.component.html","./src/app/modules/games/round/round-t-wrapper/round-t-wrapper.component.html","./src/app/modules/games/round/round-wrapper/round-wrapper.component.html","./src/app/modules/games/round/round.component.html","./src/app/modules/games/round/rummy/round-rummy/round-rummy.component.html","./src/app/modules/games/round/thousand/round-thousand/round-thousand.component.html","./src/app/modules/games/round/train/round-cars/round-cars.component.html","./src/app/modules/games/round/train/round-length/round-length.component.html","./src/app/modules/games/round/train/round-routes/round-routes.component.html","./src/app/modules/games/round/train/round-stations/round-stations.component.html","./src/app/modules/games/round/uno/round-uno/round-uno.component.html"],"sourcesContent":["import { Component, Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanDeactivate,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  CanDeactivateComponent,\n  GameActionConfirmModalData,\n} from 'src/app/interfaces';\nimport { ModalService } from 'src/app/services/modal.service';\nimport { ActionConfirmComponent } from '../common/action-confirm/action-confirm.component';\nimport { GamePage } from '../games/game/game.page';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeactivateRouteGuard\n  implements CanDeactivate<CanDeactivateComponent>\n{\n  constructor(private modalService: ModalService) {}\n  canDeactivate(\n    component: CanDeactivateComponent,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState?: RouterStateSnapshot,\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    if (!component.canDeactivate()) {\n      const data: GameActionConfirmModalData = {\n        title: 'elements.button.leaveGame',\n        text: 'common.leaveGameQuestion',\n        cancelBtnText: 'elements.button.returnToGame',\n        confirmBtnText: 'elements.button.leaveGame',\n      };\n      return this.modalService\n        .presentModal(ActionConfirmComponent, { data })\n        .then(({ role }) => role === 'confirm');\n    } else {\n      return Promise.resolve(true);\n    }\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { GameActionConfirmModalData } from 'src/app/interfaces';\n\n@Component({\n  selector: 'app-action-confirm',\n  templateUrl: './action-confirm.component.html',\n  styleUrls: ['./action-confirm.component.scss'],\n})\nexport class ActionConfirmComponent implements OnInit {\n  @Input() data: GameActionConfirmModalData;\n  constructor(private modalController: ModalController) {}\n\n  ngOnInit() {}\n\n  cancel() {\n    this.modalController.dismiss(null, 'cancel');\n  }\n\n  confirm() {\n    this.modalController.dismiss(null, 'confirm');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActionConfirmComponent } from './action-confirm/action-confirm.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [ActionConfirmComponent],\n  exports: [ActionConfirmComponent],\n  imports: [\n    CommonModule,\n    TranslateModule.forChild({\n      extend: true,\n    }),\n  ],\n})\nexport class SharedModule {}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DeactivateRouteGuard } from '../../auth/deactivate-route.guard';\r\n\r\nimport { GamePage } from './game.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: GamePage,\r\n    canDeactivate: [DeactivateRouteGuard],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class GamePageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { GamePageRoutingModule } from './game-routing.module';\r\n\r\nimport { GamePage } from './game.page';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { RoundModule } from '../round/round.module';\r\nimport { GamersModule } from '../gamers/gamers.module';\r\nimport { GameResultComponent } from './game-result/game-result.component';\r\nimport { SharedModule } from '../../common/shared.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    GamePageRoutingModule,\r\n    TranslateModule.forChild({\r\n      extend: true,\r\n    }),\r\n    RoundModule,\r\n    GamersModule,\r\n    SharedModule,\r\n  ],\r\n  declarations: [GamePage, GameResultComponent],\r\n})\r\nexport class GamePageModule {}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  Observable,\r\n  of,\r\n  ReplaySubject,\r\n  Subject,\r\n} from 'rxjs';\r\nimport {\r\n  CanDeactivateComponent,\r\n  GameActionConfirmModalData,\r\n  GameType,\r\n  IGame,\r\n  IGamer,\r\n  IGamerTotal,\r\n  Round,\r\n  RoundCfg,\r\n  RoundMember,\r\n  UID,\r\n} from 'src/app/interfaces';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as fromAppReducer from '../../../store/reducers/app.reducer';\r\nimport * as fromRoundsReducer from '../../../store/reducers/round.reducer';\r\nimport * as fromPlayersReducer from '../../../store/reducers/player.reducer';\r\nimport * as fromRoundMembersReducer from '../../../store/reducers/round-member.reducer';\r\nimport { map, switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport * as fromRoundActions from 'src/app/store/actions/round.actions';\r\nimport * as fromRoundMemberActions from 'src/app/store/actions/round-member.actions';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as fromAppActions from 'src/app/store/actions/app.actions';\r\nimport { GameService } from 'src/app/store/game-data.service';\r\nimport { ModalService } from 'src/app/services/modal.service';\r\nimport { GameResultComponent } from './game-result/game-result.component';\r\nimport { IonModal, ModalController } from '@ionic/angular';\r\nimport { ActionConfirmComponent } from '../../common/action-confirm/action-confirm.component';\r\n\r\n@Component({\r\n  selector: 'app-game',\r\n  templateUrl: './game.page.html',\r\n  styleUrls: ['./game.page.scss'],\r\n})\r\nexport class GamePage implements OnInit, CanDeactivateComponent {\r\n  @ViewChild(IonModal) modal: IonModal;\r\n\r\n  roundsCfg: RoundCfg[];\r\n  nextRound: RoundCfg;\r\n\r\n  gameType: string;\r\n  gameType$: Observable<GameType>;\r\n  environment = environment;\r\n  showToolbarMenu = false;\r\n\r\n  activeRound: string;\r\n  activeRoundId$ = new ReplaySubject<string>(1);\r\n  activePlayerId$ = new ReplaySubject<UID>(1);\r\n  activePlayerId: UID;\r\n\r\n  loading$: Observable<boolean>;\r\n  rounds$: Observable<Round[]>;\r\n  rounds: Round[];\r\n\r\n  players$: Observable<IGamer[]>;\r\n  players: IGamer[];\r\n  playersWithTotal: IGamerTotal[];\r\n  roundMembers$: Observable<RoundMember[]>;\r\n  roundMembers: RoundMember[];\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private sharedService: SharedService,\r\n    private route: ActivatedRoute,\r\n    private modalService: ModalService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loading$ = this.store.select(fromAppReducer.selectLoading);\r\n    this.gameType$ = this.store.select(fromAppReducer.selectGameType);\r\n    this.rounds$ = this.store.select(fromRoundsReducer.selectAllRounds);\r\n\r\n    combineLatest([this.gameType$, this.rounds$]).subscribe(\r\n      ([gameType, rounds]) => {\r\n        if (!gameType) {\r\n          return;\r\n        }\r\n        this.gameType = gameType;\r\n\r\n        this.showToolbarMenu = environment.games[gameType].showToolbarMenu;\r\n\r\n        this.roundsCfg = environment.games[gameType].rounds;\r\n        if (gameType === 'uno') {\r\n          this.nextRound = this.roundsCfg[1];\r\n        }\r\n        this.rounds = rounds;\r\n        if (!this.roundsCfg) {\r\n          return;\r\n        }\r\n        if (rounds.length) {\r\n          // game started and active menu 'start'\r\n          if (this.gameType === 'uno') {\r\n            this.activeRoundId$.next(\r\n              this.roundsCfg[1]._id +\r\n                (rounds.length === 1\r\n                  ? this.roundsCfg[1].namePostfix\r\n                  : rounds.length),\r\n            );\r\n          } else {\r\n            this.activeRoundId$.next(this.roundsCfg[1]._id);\r\n          }\r\n        } else {\r\n          // game not started and active menu !'start'\r\n          this.activeRoundId$.next(this.roundsCfg[0]._id);\r\n        }\r\n      },\r\n    );\r\n\r\n    this.roundMembers$ = this.store.select(\r\n      fromRoundMembersReducer.selectAllRoundMembers,\r\n    );\r\n\r\n    this.players$ = this.store.select(fromPlayersReducer.selectAllPlayers);\r\n    this.players$.subscribe((players) => {\r\n      if (players.length) {\r\n        this.activePlayerId$.next(players[0]._id);\r\n      }\r\n    });\r\n\r\n    this.players$\r\n      .pipe(\r\n        switchMap((players) => {\r\n          this.players = players;\r\n          return this.roundMembers$;\r\n        }),\r\n      )\r\n      .subscribe((roundMembers) => {\r\n        this.roundMembers = roundMembers;\r\n        this.playersWithTotal = this.players\r\n\r\n          .map((player) => {\r\n            return {\r\n              ...player,\r\n              totalScore: this.getPlayerTotalScores(player._id),\r\n            };\r\n          })\r\n          .sort((a, b) => b.totalScore - a.totalScore);\r\n      });\r\n    this.activePlayerId$.subscribe(\r\n      (activePlayerId) => (this.activePlayerId = activePlayerId),\r\n    );\r\n\r\n    this.route.params.subscribe((params) => {\r\n      // this.gameType = params.id;\r\n    });\r\n  }\r\n\r\n  canDeactivate(): boolean {\r\n    return this.rounds.length === 0;\r\n  }\r\n\r\n  finishGameDisabled(playersWithTotal: IGamer[]): boolean {\r\n    let countZeros = 0;\r\n\r\n    playersWithTotal.forEach((player: IGamer) => {\r\n      if (this.getPlayerTotalScores(player._id) === 0) {\r\n        countZeros++;\r\n      }\r\n    });\r\n    return countZeros !== 1;\r\n  }\r\n\r\n  getPlayerTotalScores(player: string): number {\r\n    return this.sharedService.getPlayerTotalScores(player);\r\n  }\r\n\r\n  onMenuClickHandler(e: any) {\r\n    this.activeRoundId$.next(e.target.value);\r\n  }\r\n\r\n  async onFinishGameHandler() {\r\n    const data: GameActionConfirmModalData = {\r\n      title: 'elements.button.finishGame',\r\n      text: 'common.finishGameQuestion',\r\n      cancelBtnText: 'elements.button.returnToGame',\r\n      confirmBtnText: 'elements.button.finishGame',\r\n    };\r\n    const { role } = await this.modalService.presentModal(\r\n      ActionConfirmComponent,\r\n      { data },\r\n    );\r\n    if (role === 'confirm') {\r\n      this.store.dispatch(fromAppActions.finishGame());\r\n    }\r\n  }\r\n\r\n  async onCancelGameHandler() {\r\n    const data: GameActionConfirmModalData = {\r\n      title: 'elements.button.cancelGame',\r\n      text: 'common.cancelGameQuestion',\r\n      cancelBtnText: 'elements.button.returnToGame',\r\n      confirmBtnText: 'elements.button.cancelGame',\r\n    };\r\n    const { role } = await this.modalService.presentModal(\r\n      ActionConfirmComponent,\r\n      { data },\r\n    );\r\n    if (role === 'confirm') {\r\n      this.store.dispatch(fromAppActions.clearGame());\r\n    }\r\n  }\r\n\r\n  openNextRound() {\r\n    this.store.dispatch(fromAppActions.openNextRound());\r\n    // this.sharedService.addRounds(this.nextRound);\r\n  }\r\n\r\n  selectPlayer(playerId: UID) {\r\n    if (this.gameType === 'thousand') {\r\n      return;\r\n    }\r\n    this.activePlayerId$.next(playerId);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  FormGroupDirective,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  CollectionSelectors,\r\n  EntityActionFactory,\r\n  MergeStrategy,\r\n} from '@ngrx/data';\r\nimport { ReducerManager, Store } from '@ngrx/store';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\nimport { IGamer, Colors, IGame, GameType } from 'src/app/interfaces';\r\nimport {\r\n  GamerDataService,\r\n  GamerService,\r\n} from 'src/app/store/gamer-data.service';\r\nimport { AuthService } from '../../../auth/auth.service';\r\nimport { AlertController, PopoverController } from '@ionic/angular';\r\nimport { SelectColorComponent } from '../select-color/select-color.component';\r\nimport { CreateGamerComponent } from '../create-gamer/create-gamer.component';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { GameService } from 'src/app/store/game-data.service';\r\nimport { addRound, loadRounds } from 'src/app/store/actions/round.actions';\r\nimport { loadPlayers } from 'src/app/store/actions/player.actions';\r\nimport * as fromPlayerReducer from '../../../../store/reducers/player.reducer';\r\nimport * as fromAppReducer from '../../../../store/reducers/app.reducer';\r\n\r\nimport * as fromPlayerActions from '../../../../store/actions/player.actions';\r\nimport * as fromAppActions from '../../../../store/actions/app.actions';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-choose-players',\r\n  templateUrl: './choose-players.component.html',\r\n  styleUrls: ['./choose-players.component.scss'],\r\n})\r\nexport class ChoosePlayersComponent implements OnInit {\r\n  // @Input() gameType: string;\r\n  environment = environment;\r\n\r\n  gamers$: Observable<IGamer[]> | Store<IGamer[]>;\r\n  gamers: IGamer[] = [];\r\n\r\n  gameType$: Observable<GameType>;\r\n  gameType: GameType;\r\n\r\n  filtredGamers: IGamer[] = [];\r\n  // showSelectColor: number | null;\r\n  players: IGamer[] = [];\r\n  players$: Observable<IGamer[]>;\r\n  // recentPlayers$: Observable<IGamer[]>;\r\n  // playersTotal$: Observable<number>;\r\n\r\n  playersColors: Colors[];\r\n  filtredColors: Colors[];\r\n\r\n  constructor(\r\n    private store: Store,\r\n    public translate: TranslateService,\r\n    private gamerService: GamerService,\r\n    public popoverController: PopoverController,\r\n    public alertController: AlertController,\r\n    private sharedService: SharedService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.gameType$ = this.store.select(fromAppReducer.selectGameType);\r\n    this.gameType$.subscribe((gameType) => {\r\n      this.gameType = gameType;\r\n      this.playersColors = environment.games[gameType]\r\n        ?.playersColors as Colors[];\r\n      this.filtredColors = environment.games[gameType]\r\n        ?.playersColors as Colors[];\r\n    });\r\n\r\n    this.players$ = this.store.select(fromPlayerReducer.selectAllPlayers);\r\n    this.players$.subscribe((players) => {\r\n      this.players = players;\r\n      this.filter();\r\n    });\r\n\r\n    this.gamers$ = this.gamerService.entities$;\r\n    this.gamers$.subscribe((gamers) => {\r\n      this.gamers = gamers;\r\n      this.filter();\r\n    });\r\n  }\r\n\r\n  startGameHandler() {\r\n    this.store.dispatch(fromAppActions.createRounds());\r\n    // this.sharedService.createRounds(this.gameType);\r\n  }\r\n\r\n  async presentPopover(event: Event, component: any, data: any): Promise<any> {\r\n    const popover = await this.popoverController.create({\r\n      component,\r\n      cssClass: 'select-color-popover',\r\n      // event,\r\n      componentProps: data,\r\n      translucent: true,\r\n    });\r\n    await popover.present();\r\n    return await popover.onDidDismiss();\r\n  }\r\n\r\n  async showSelectColorPopup(event: Event, index: number) {\r\n    const { data } = await this.presentPopover(event, SelectColorComponent, {\r\n      colors: this.filtredColors,\r\n    });\r\n    if (data) {\r\n      const { color } = data;\r\n      this.chooseColorHandler(color, index);\r\n    }\r\n  }\r\n\r\n  async showCreateGamerPopup(event: Event) {\r\n    const { data } = await this.presentPopover(\r\n      event,\r\n      CreateGamerComponent,\r\n      null,\r\n    );\r\n    if (data) {\r\n      const { gamer } = data;\r\n      this.createGamerHandler(gamer);\r\n    }\r\n  }\r\n\r\n  filter() {\r\n    this.filtredGamers = this.gamers.filter((gamer) => {\r\n      for (const player of this.players) {\r\n        if (player._id === gamer._id) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    const filtredColors = this.playersColors?.filter((color, idx) => {\r\n      for (const player of this.players) {\r\n        if (player.color === color) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    this.filtredColors = filtredColors?.length\r\n      ? filtredColors\r\n      : this.filtredColors;\r\n  }\r\n\r\n  choosePlayerHandler(e: any, index: number) {\r\n    const players = this.players.map((player, idx) => {\r\n      if (idx === index) {\r\n        const preferredColor = this.filtredGamers[0].color;\r\n        if (this.filtredColors.includes(preferredColor)) {\r\n          return e.target.value;\r\n        } else {\r\n          return { ...e.target.value, color: this.filtredColors[0] };\r\n        }\r\n      }\r\n      return player;\r\n    });\r\n    this.store.dispatch(fromPlayerActions.loadPlayers({ players }));\r\n  }\r\n\r\n  chooseColorHandler(color: Colors, index: number) {\r\n    this.players = this.players.map((player, idx) => {\r\n      if (idx === index) {\r\n        return { ...player, color };\r\n      }\r\n      return player;\r\n    });\r\n    this.filter();\r\n  }\r\n\r\n  removePlayerHandler(_id: string) {\r\n    this.store.dispatch(fromPlayerActions.deletePlayer({ id: _id }));\r\n  }\r\n\r\n  removeAllPlayersHandler() {\r\n    this.store.dispatch(fromPlayerActions.clearPlayers());\r\n  }\r\n\r\n  addPlayerHandler(firstEl = true) {\r\n    if (!this.filtredGamers.length) {\r\n      return;\r\n    }\r\n    let candidate = this.filtredGamers[0];\r\n    if (!firstEl) {\r\n      candidate = this.filtredGamers[this.filtredGamers.length - 1];\r\n    }\r\n    const preferredColor = candidate.color;\r\n    if (this.filtredColors.includes(preferredColor)) {\r\n      this.store.dispatch(\r\n        fromPlayerActions.addPlayer({ player: { ...candidate } }),\r\n      );\r\n    } else {\r\n      this.store.dispatch(\r\n        fromPlayerActions.addPlayer({\r\n          player: { ...candidate, color: this.filtredColors[0] },\r\n        }),\r\n      );\r\n    }\r\n    // this.filter();\r\n  }\r\n\r\n  createGamerHandler(gamer: IGamer) {\r\n    this.gamerService.add(gamer).subscribe((result) => {\r\n      // console.log(result);\r\n    });\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { PopoverController } from '@ionic/angular';\r\nimport { Colors, IGamer } from 'src/app/interfaces';\r\nimport { environment } from 'src/environments/environment';\r\nimport { SelectColorComponent } from '../select-color/select-color.component';\r\n\r\n@Component({\r\n  selector: 'app-create-gamer',\r\n  templateUrl: './create-gamer.component.html',\r\n  styleUrls: ['./create-gamer.component.scss'],\r\n})\r\nexport class CreateGamerComponent implements OnInit {\r\n  playersColors = environment.games.train.playersColors as Colors[];\r\n  color: Colors = this.playersColors[0];\r\n  name: string;\r\n  constructor(public popoverController: PopoverController) {}\r\n\r\n  ngOnInit() {}\r\n  async presentPopover(event: Event, component: any, data: any): Promise<any> {\r\n    const popover = await this.popoverController.create({\r\n      component,\r\n      cssClass: 'select-color-popover',\r\n      // event,\r\n      componentProps: data,\r\n      translucent: true,\r\n    });\r\n    await popover.present();\r\n    return await popover.onDidDismiss();\r\n  }\r\n\r\n  async showSelectColorPopup(event: Event) {\r\n    const { data } = await this.presentPopover(event, SelectColorComponent, {\r\n      colors: this.playersColors,\r\n    });\r\n    if (data) {\r\n      const { color } = data;\r\n      this.color = color;\r\n    }\r\n  }\r\n\r\n  dismiss(data?: any): void {\r\n    this.popoverController.dismiss(data);\r\n  }\r\n\r\n  onCreate() {\r\n    this.dismiss({\r\n      gamer: {\r\n        color: this.color,\r\n        name: this.name,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChoosePlayersComponent } from './choose-players/choose-players.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SelectColorComponent } from './select-color/select-color.component';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { CreateGamerComponent } from './create-gamer/create-gamer.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [ChoosePlayersComponent, SelectColorComponent, CreateGamerComponent],\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule,\r\n    IonicModule,\r\n    TranslateModule.forChild({\r\n      extend: true,\r\n    }),\r\n  ],\r\n  exports: [ChoosePlayersComponent],\r\n})\r\nexport class GamersModule {}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { PopoverController } from '@ionic/angular';\r\nimport { Colors } from 'src/app/interfaces';\r\n\r\n@Component({\r\n  selector: 'app-select-color',\r\n  templateUrl: './select-color.component.html',\r\n  styleUrls: ['./select-color.component.scss'],\r\n})\r\nexport class SelectColorComponent implements OnInit {\r\n  @Input() colors: Colors[];\r\n\r\n  constructor(public popoverController: PopoverController) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  dismiss(data?: any): void {\r\n    this.popoverController.dismiss(data);\r\n  }\r\n\r\n  onSelect(color: Colors) {\r\n    this.dismiss({\r\n      color,\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Update } from '@ngrx/entity';\nimport { Store } from '@ngrx/store';\nimport { first } from 'rxjs/operators';\nimport {\n  NamedScore,\n  RoundMember,\n  RoundScores,\n  RoundScoresType,\n  UID,\n} from 'src/app/interfaces';\nimport { SharedService } from 'src/app/services/shared.service';\nimport { selectByIdRoundMember } from 'src/app/store/reducers/round-member.reducer';\nimport * as fromRoundMembersActions from '../../store/actions/round-member.actions';\nimport { TelegramService } from '../auth/telegram/telegram.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GamesService {\n  constructor(\n    protected store: Store,\n    protected sharedService: SharedService,\n    protected telegramService: TelegramService,\n  ) {}\n\n  storeRoundScores(scores: RoundScoresType) {\n    const updates: Update<RoundMember>[] = [];\n    for (const key in scores) {\n      // TODO: Object.keys\n      if (scores.hasOwnProperty(key)) {\n        this.store\n          .select(selectByIdRoundMember(key))\n          .pipe(first())\n          .subscribe((roundMember) => {\n            const namedScore: NamedScore = {\n              name: scores[key].name,\n              value: scores[key].value,\n            };\n            updates.push({\n              id: roundMember._id,\n              changes: {\n                ...roundMember,\n                namedScoresLine: [...roundMember.namedScoresLine, namedScore],\n                scoresLine: [...roundMember.scoresLine, namedScore.value],\n              },\n            });\n          });\n      }\n    }\n    this.store.dispatch(\n      fromRoundMembersActions.updateRoundMembers({\n        roundMembers: updates,\n      }),\n    );\n  }\n\n  addToNamedScoresLine(namedScore: NamedScore, playerId: UID, roundId: string) {\n    const roundMember = this.sharedService.getMemberByPlayerId(\n      playerId,\n      roundId,\n    );\n    const changes = {\n      ...roundMember,\n      namedScoresLine: [...roundMember.namedScoresLine, namedScore],\n      scoresLine: [...roundMember.scoresLine, namedScore.value],\n    };\n\n    this.store.dispatch(\n      fromRoundMembersActions.updateRoundMember({\n        roundMember: {\n          id: roundMember._id,\n          changes,\n        },\n      }),\n    );\n    // this.addToScoresLine(namedScore.value, playerId, roundId);\n  }\n\n  addToScoresLine(score: number, playerId: UID, roundId: string) {\n    const roundMember = this.sharedService.getMemberByPlayerId(\n      playerId,\n      roundId,\n    );\n    const changes = {\n      ...roundMember,\n      scoresLine: [...roundMember.scoresLine, score],\n    };\n\n    this.store.dispatch(\n      fromRoundMembersActions.updateRoundMember({\n        roundMember: {\n          id: roundMember._id,\n          changes,\n        },\n      }),\n    );\n  }\n\n  removeFromNamedScoresLine(\n    namedScore: NamedScore,\n    playerId: UID,\n    roundId: string,\n  ) {\n    const roundMember = this.sharedService.getMemberByPlayerId(\n      playerId,\n      roundId,\n    );\n    const namedScoresLine = [...roundMember.namedScoresLine];\n    const index = namedScoresLine.findIndex(\n      (ns) => ns.name === namedScore.name,\n    );\n    if (index !== -1) {\n      namedScoresLine.splice(index, 1);\n      const changes = {\n        ...roundMember,\n        namedScoresLine,\n      };\n      this.store.dispatch(\n        fromRoundMembersActions.updateRoundMember({\n          roundMember: {\n            id: roundMember._id,\n            changes,\n          },\n        }),\n      );\n\n      this.removeFromScoresLine(namedScore.value, playerId, roundId);\n    }\n  }\n\n  removeFromScoresLine(score: number, playerId: UID, roundId: string) {\n    const roundMember = this.sharedService.getMemberByPlayerId(\n      playerId,\n      roundId,\n    );\n    const scoresLine = [...roundMember.scoresLine];\n    const index = scoresLine.indexOf(score);\n    scoresLine.splice(index, 1);\n\n    const changes = {\n      ...roundMember,\n      scoresLine,\n    };\n\n    this.store.dispatch(\n      fromRoundMembersActions.updateRoundMember({\n        roundMember: {\n          id: roundMember._id,\n          changes,\n        },\n      }),\n    );\n  }\n\n  setScoresLine(scoresLine: number[], playerId: UID, roundId: string) {\n    const roundMember = this.sharedService.getMemberByPlayerId(\n      playerId,\n      roundId,\n    );\n    const changes = {\n      ...roundMember,\n      scoresLine,\n    };\n\n    this.store.dispatch(\n      fromRoundMembersActions.updateRoundMember({\n        roundMember: {\n          id: roundMember._id,\n          changes,\n        },\n      }),\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { IGamer, NamedScore, Round, RoundMember, UID } from 'src/app/interfaces';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport { GamesService } from '../games.service';\r\n\r\nexport const ROUND_COMPONENT = new InjectionToken<RoundBase>('roundComponent');\r\n\r\nexport interface RoundBase {\r\n  playerId: UID;\r\n  roundId: string;\r\n  sharedService: SharedService;\r\n  gamesService: GamesService;\r\n  getMemberByPlayerId: (playerId: string) => RoundMember;\r\n}\r\n\r\nexport interface RoundBaseWrapper {\r\n  roundComponent: RoundBase;\r\n  playerId: UID;\r\n  roundId: string;\r\n  sharedService: SharedService;\r\n  getRoundById: (roundId: string) => Round;\r\n  calcScores: (playerId: string) => number;\r\n  getPlayerColor: (playerId: string) => string;\r\n  getPlayerName: (playerId: string) => string;\r\n  getMemberByPlayerId: (playerId: string) => RoundMember;\r\n}\r\n\r\nexport interface RoundScoresLine extends RoundBase {\r\n  addToScoresLine: (score: number) => void;\r\n  removeFromScoresLine: (score: number) => void;\r\n  addToNamedScoresLine: (namedScore: NamedScore, playerId?: UID) => void;\r\n  removeFromNamedScoresLine: (namedScore: NamedScore) => void;\r\n}\r\n\r\nexport interface RoundTBase extends RoundScoresLine, RoundBase {\r\n  store: Store;\r\n  rounds$: Observable<Round[]>;\r\n}\r\n\r\nexport interface RoundLongest {\r\n  longestRouteScoreEnv: number;\r\n  onMarkLongestHandler: (e: any) => void;\r\n}\r\n\r\nexport type Inverse = 1 | -1;\r\n\r\nexport interface RoundRoutes {\r\n  routesScoresEnv: NamedScore[];\r\n  inverse: Inverse;\r\n  inverseScore: (e: any) => void;\r\n}\r\n\r\nexport interface RoundCars {\r\n  carsScoresEnv: {\r\n    name: number;\r\n    value: number;\r\n  }[];\r\n  calcQtyOfArrItems: (e: any) => void;\r\n}\r\n","import { Component, ContentChild, Input, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { GameType, IGamer, Round, RoundMember, UID } from 'src/app/interfaces';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport { RoundBase, RoundBaseWrapper, ROUND_COMPONENT } from '../round-interfaces';\r\nimport { selectGameType, selectLoading } from '../../../../store/reducers/app.reducer';\r\nimport { Observable } from 'rxjs';\r\nimport { selectAllPlayers } from 'src/app/store/reducers/player.reducer';\r\n\r\n@Component({\r\n  selector: 'app-round-t-wrapper',\r\n  templateUrl: './round-t-wrapper.component.html',\r\n  styleUrls: ['./round-t-wrapper.component.scss'],\r\n})\r\nexport class RoundTWrapperComponent implements OnInit, RoundBaseWrapper {\r\n  @ContentChild(ROUND_COMPONENT, { static: true })\r\n  roundComponent: RoundBase;\r\n\r\n  @Input() playerId: UID;\r\n  @Input() roundId: string;\r\n  players$: Observable<IGamer[]>;\r\n\r\n  gameType$: Observable<GameType>;\r\n  loading$: Observable<boolean>;\r\n  gameType: GameType;\r\n\r\n  constructor(public sharedService: SharedService, private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    this.loading$ = this.store.select(selectLoading);\r\n    this.gameType$ = this.store.select(selectGameType);\r\n    this.players$ = this.store.select(selectAllPlayers);\r\n    this.gameType$.subscribe((gameType) => (this.gameType = gameType));\r\n  }\r\n\r\n  getRoundById(): Round {\r\n    return this.sharedService.getRoundById(this.roundId);\r\n  }\r\n\r\n  calcScores(): number {\r\n    return this.getMemberByPlayerId()?.scoresLine.reduce((prev, cur) => prev + cur, 0);\r\n  }\r\n\r\n  getPlayerColor(): string {\r\n    return this.sharedService.getPlayerColor(this.playerId);\r\n  }\r\n\r\n  getPlayerName(): string {\r\n    return this.sharedService.getPlayerName(this.playerId);\r\n  }\r\n\r\n  getMemberByPlayerId(): RoundMember {\r\n    return this.sharedService.getMemberByPlayerId(this.playerId, this.roundId);\r\n  }\r\n}\r\n","import { Component, ContentChild, Input, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { GameType, Round, RoundMember, UID } from 'src/app/interfaces';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport { RoundBase, RoundBaseWrapper, ROUND_COMPONENT } from '../round-interfaces';\r\nimport { selectGameType, selectLoading } from '../../../../store/reducers/app.reducer';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-round-wrapper',\r\n  templateUrl: './round-wrapper.component.html',\r\n  styleUrls: ['./round-wrapper.component.scss'],\r\n})\r\nexport class RoundWrapperComponent implements OnInit, RoundBaseWrapper {\r\n  @ContentChild(ROUND_COMPONENT, { static: true })\r\n  roundComponent: RoundBase;\r\n  @Input() playerId: UID;\r\n  @Input() roundId: string;\r\n  gameType$: Observable<GameType>;\r\n  loading$: Observable<boolean>;\r\n  gameType: GameType;\r\n\r\n  constructor(public sharedService: SharedService, private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    this.loading$ = this.store.select(selectLoading);\r\n    this.gameType$ = this.store.select(selectGameType);\r\n    this.gameType$.subscribe((gameType) => (this.gameType = gameType));\r\n  }\r\n\r\n  getRoundById(): Round {\r\n    return this.sharedService.getRoundById(this.roundId);\r\n  }\r\n\r\n  calcScores(): number {\r\n    return this.getMemberByPlayerId()?.scoresLine.reduce((prev, cur) => prev + cur, 0);\r\n  }\r\n\r\n  getPlayerColor(): string {\r\n    return this.sharedService.getPlayerColor(this.playerId);\r\n  }\r\n\r\n  getPlayerName(): string {\r\n    return this.sharedService.getPlayerName(this.playerId);\r\n  }\r\n\r\n  getMemberByPlayerId(): RoundMember {\r\n    return this.sharedService.getMemberByPlayerId(this.playerId, this.roundId);\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { GameType, IGamer, Round, UID } from 'src/app/interfaces';\r\nimport { selectGameType } from 'src/app/store/reducers/app.reducer';\r\nimport { selectAllRounds } from 'src/app/store/reducers/round.reducer';\r\n\r\n@Component({\r\n  selector: 'app-round',\r\n  templateUrl: './round.component.html',\r\n  styleUrls: ['./round.component.scss'],\r\n})\r\nexport class RoundComponent implements OnInit {\r\n  @Input() activeRoundId$: Observable<string>;\r\n  @Input() activePlayerId$: Observable<UID>;\r\n  @Input() gameType$: Observable<GameType>;\r\n  @Input() players$: Observable<IGamer[]>;\r\n\r\n  rounds$: Observable<Round[]>;\r\n  // gameType$: Observable<GameType>;\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    this.rounds$ = this.store.select(selectAllRounds);\r\n    // this.gameType$ = this.store.select(selectGameType);\r\n  }\r\n}\r\n","import { Directive, Injector, Input } from '@angular/core';\r\nimport { Actions } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { IGamer, NamedScore, Round, RoundMember, UID } from 'src/app/interfaces';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport { selectAllRoundMembers } from 'src/app/store/reducers/round-member.reducer';\r\nimport { selectAllRounds } from 'src/app/store/reducers/round.reducer';\r\nimport { environment } from 'src/environments/environment';\r\nimport { TelegramService } from '../../auth/telegram/telegram.service';\r\nimport { GamesService } from '../games.service';\r\nimport { RoundBase, RoundScoresLine, RoundTBase } from './round-interfaces';\r\n\r\n@Directive({\r\n  selector: '[appRound]',\r\n})\r\nexport class RoundBaseDirective implements RoundBase {\r\n  @Input() playerId: UID;\r\n  @Input() roundId: string;\r\n  sharedService: SharedService;\r\n  gamesService: GamesService;\r\n  telegramService: TelegramService;\r\n  actions$: Actions;\r\n\r\n  constructor(injector: Injector) {\r\n    this.sharedService = injector.get(SharedService);\r\n    this.gamesService = injector.get(GamesService);\r\n    this.telegramService = injector.get(TelegramService);\r\n    this.actions$ = injector.get(Actions);\r\n  }\r\n\r\n  getMemberByPlayerId(): RoundMember {\r\n    return this.sharedService.getMemberByPlayerId(this.playerId, this.roundId);\r\n  }\r\n\r\n  addToScoresLine(score: number): void {\r\n    this.gamesService.addToScoresLine(score, this.playerId, this.roundId);\r\n  }\r\n\r\n  removeFromScoresLine(score: number): void {\r\n    this.gamesService.removeFromScoresLine(score, this.playerId, this.roundId);\r\n  }\r\n\r\n  setScoresLine(scoresLine: number[], playerId: UID, roundId: string) {\r\n    this.gamesService.setScoresLine(scoresLine, playerId, roundId);\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[appRoundScoresLine]',\r\n})\r\nexport class RoundScoresLineDirective extends RoundBaseDirective implements RoundScoresLine {\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  addToNamedScoresLine(namedScore: NamedScore, playerId?: UID) {\r\n    this.gamesService.addToNamedScoresLine(namedScore, playerId || this.playerId, this.roundId);\r\n  }\r\n\r\n  removeFromNamedScoresLine(namedScore: NamedScore) {\r\n    this.gamesService.removeFromNamedScoresLine(namedScore, this.playerId, this.roundId);\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[appRoundT]',\r\n})\r\nexport class RoundTBaseDirective extends RoundScoresLineDirective implements RoundTBase {\r\n  store: Store;\r\n  rounds$: Observable<Round[]>;\r\n  roundMembers$: Observable<RoundMember[]>;\r\n  // roundMembers: RoundMember[];\r\n\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n    this.store = injector.get(Store);\r\n    this.rounds$ = this.store.select(selectAllRounds);\r\n    this.roundMembers$ = this.store.select(selectAllRoundMembers);\r\n\r\n    // this.roundMembers$.subscribe((roundMembers) => this.roundMembers = roundMembers)\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RoundWrapperComponent } from './round-wrapper/round-wrapper.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RoundComponent } from './round.component';\r\nimport { RoundRoutesComponent } from './train/round-routes/round-routes.component';\r\nimport { RoundLengthComponent } from './train/round-length/round-length.component';\r\nimport { RoundStationsComponent } from './train/round-stations/round-stations.component';\r\nimport { RoundCarsComponent } from './train/round-cars/round-cars.component';\r\nimport { RoundUnoComponent } from './uno/round-uno/round-uno.component';\r\nimport { GamersModule } from '../gamers/gamers.module';\r\nimport { RoundTWrapperComponent } from './round-t-wrapper/round-t-wrapper.component';\r\nimport { RoundThousandComponent } from './thousand/round-thousand/round-thousand.component';\r\nimport { RoundRummyComponent } from './rummy/round-rummy/round-rummy.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RoundWrapperComponent,\r\n    RoundTWrapperComponent,\r\n    RoundComponent,\r\n    RoundRoutesComponent,\r\n    RoundLengthComponent,\r\n    RoundStationsComponent,\r\n    RoundCarsComponent,\r\n    RoundUnoComponent,\r\n    RoundThousandComponent,\r\n    RoundRummyComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    TranslateModule.forChild({\r\n      extend: true,\r\n    }),\r\n    GamersModule,\r\n  ],\r\n  exports: [RoundComponent],\r\n})\r\nexport class RoundModule {}\r\n","import { Component, Injector, OnInit } from '@angular/core';\r\nimport { NamedScore } from 'src/app/interfaces';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ROUND_COMPONENT } from '../../round-interfaces';\r\nimport { RoundBaseDirective, RoundScoresLineDirective } from '../../round.directive';\r\n\r\n@Component({\r\n  selector: 'app-round-rummy',\r\n  templateUrl: './round-rummy.component.html',\r\n  styleUrls: ['./round-rummy.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: ROUND_COMPONENT,\r\n      useExisting: RoundRummyComponent,\r\n    },\r\n  ],\r\n})\r\nexport class RoundRummyComponent extends RoundScoresLineDirective implements OnInit {\r\n  namedScoresEnv = environment.games.rummy.namedScores;\r\n  namedScoreLine: NamedScore[] = [];\r\n\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { Component, Injector, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { ofType } from '@ngrx/effects';\r\nimport {\r\n  MessageDto,\r\n  MessageThousandRound,\r\n  NamedScore,\r\n  RoundMember,\r\n  RoundScoresOptionsType,\r\n  RoundScoresType,\r\n} from 'src/app/interfaces';\r\nimport { ROUND_COMPONENT } from '../../round-interfaces';\r\nimport { RoundTBaseDirective } from '../../round.directive';\r\nimport * as fromAppActions from '../../../../../store/actions/app.actions';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-round-thousand',\r\n  templateUrl: './round-thousand.component.html',\r\n  styleUrls: ['./round-thousand.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: ROUND_COMPONENT,\r\n      useExisting: RoundThousandComponent,\r\n    },\r\n  ],\r\n})\r\nexport class RoundThousandComponent\r\n  extends RoundTBaseDirective\r\n  implements OnInit, OnDestroy\r\n{\r\n  scores: RoundScoresType = {};\r\n  initialScores: RoundScoresType = {};\r\n  roundScoresOption: RoundScoresOptionsType;\r\n  qtyOfPlayers: number;\r\n  roundMembers: RoundMember[];\r\n  activeRoundMemberId: string;\r\n  isFinished = false;\r\n  sub: any;\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.sub = this.roundMembers$.subscribe((roundMembers) => {\r\n      this.qtyOfPlayers = roundMembers.length;\r\n      this.roundMembers = roundMembers;\r\n      if (this.checkOnFinishGame() && !this.isFinished) {\r\n        // game finished\r\n        this.isFinished = true;\r\n        return this.store.dispatch(fromAppActions.finishGame());\r\n      } else if (\r\n        roundMembers.length &&\r\n        roundMembers[0].namedScoresLine.length &&\r\n        roundMembers[0].namedScoresLine.length % roundMembers.length === 0\r\n      ) {\r\n        // game started and at least one round finished\r\n        const messages: MessageDto<MessageThousandRound>[] = this.addTotals(\r\n          roundMembers,\r\n        ).map((roundMember) => {\r\n          const { name, value, total } =\r\n            roundMember.namedScoresLine[roundMember.namedScoresLine.length - 1];\r\n          return {\r\n            playerId: roundMember.player,\r\n            data: { lastScores: { name, value, total } },\r\n            gameType: 'thousand',\r\n          };\r\n        });\r\n        this.telegramService\r\n          .sendMessagesThousandRoundDto(messages)\r\n          .subscribe((_) => _);\r\n      }\r\n\r\n      if (this.roundMembers.length) {\r\n        this.resetScores();\r\n      }\r\n    });\r\n\r\n    // cancel prev game\r\n    this.actions$\r\n      .pipe(ofType(fromAppActions.clearGame))\r\n      .subscribe((_) => (this.scores = {}));\r\n  }\r\n\r\n  addTotals(roundMembers: RoundMember[]): RoundMember[] {\r\n    return roundMembers.map((roundMember) => {\r\n      let acc = 0;\r\n      return {\r\n        ...roundMember,\r\n        namedScoresLine: roundMember.namedScoresLine.map(\r\n          (namedScore: NamedScore) => {\r\n            acc = namedScore.value + acc;\r\n            return { ...namedScore, total: acc };\r\n          },\r\n        ),\r\n      };\r\n    });\r\n  }\r\n\r\n  changeScoresState(\r\n    roundMemberId: string,\r\n    option: RoundScoresOptionsType,\r\n  ): void {\r\n    if (this.scores[roundMemberId].barrel > 0) {\r\n      return;\r\n    }\r\n\r\n    const currentState = this.scores[roundMemberId];\r\n    this.roundScoresOption = option;\r\n\r\n    if (currentState.disabled.includes(option)) {\r\n      return;\r\n    }\r\n    if (currentState.name === option) {\r\n      this.scores = JSON.parse(JSON.stringify(this.initialScores));\r\n      return;\r\n    }\r\n    this.scores[roundMemberId].name = option;\r\n    this.scores[roundMemberId].value = option === 'r' ? 0 : -100;\r\n\r\n    Object.keys(this.scores)\r\n      .filter((key) => key !== roundMemberId)\r\n      .forEach((key) => {\r\n        this.scores[key] = {\r\n          ...this.initialScores[key],\r\n          value: option === 'r' ? 60 : 0,\r\n        };\r\n      });\r\n  }\r\n\r\n  resetScores(): void {\r\n    const activeRoundMemberPosition = this.roundMembers.length\r\n      ? (this.roundMembers[0].namedScoresLine.length + this.qtyOfPlayers) %\r\n        this.qtyOfPlayers\r\n      : 0;\r\n    this.roundMembers.forEach((roundMember, i) => {\r\n      if (i === activeRoundMemberPosition) {\r\n        this.activeRoundMemberId = roundMember._id;\r\n      }\r\n\r\n      this.scores[roundMember._id] = {\r\n        name: 'score',\r\n        value: null,\r\n        disabled: [],\r\n        doubleZero: false,\r\n        barrel: 0,\r\n      };\r\n\r\n      if (roundMember.namedScoresLine.length > 1) {\r\n        const isDoubleZero =\r\n          roundMember.namedScoresLine[roundMember.namedScoresLine.length - 1]\r\n            .value === 0 &&\r\n          roundMember.namedScoresLine[roundMember.namedScoresLine.length - 2]\r\n            .value === 0;\r\n        if (isDoubleZero) {\r\n          this.scores[roundMember._id].doubleZero = true;\r\n        }\r\n      }\r\n\r\n      let acc = 0;\r\n      roundMember.namedScoresLine.map((namedScore: NamedScore) => {\r\n        acc = namedScore.value + acc;\r\n        if (acc >= 900 && acc < 1000) {\r\n          this.scores[roundMember._id].barrel += 1;\r\n        } else {\r\n          this.scores[roundMember._id].barrel = 0;\r\n        }\r\n      });\r\n\r\n      const isAlreadyR = roundMember.namedScoresLine.find(\r\n        (score) => score.name === 'r',\r\n      );\r\n      if (isAlreadyR) {\r\n        this.scores[roundMember._id].disabled.push('r');\r\n      }\r\n      const isAlreadyS = roundMember.namedScoresLine.find(\r\n        (score) => score.name === 's',\r\n      );\r\n      if (isAlreadyS) {\r\n        this.scores[roundMember._id].disabled.push('s');\r\n      }\r\n    });\r\n    this.initialScores = JSON.parse(JSON.stringify(this.scores));\r\n  }\r\n\r\n  checkOnTrippleZero(): void {\r\n    Object.keys(this.scores).forEach((key) => {\r\n      if (this.scores[key].barrel > 0) {\r\n        return;\r\n      }\r\n      if (this.scores[key].doubleZero && this.scores[key].value === 0) {\r\n        this.scores[key].value = -100;\r\n      }\r\n    });\r\n  }\r\n\r\n  checkOnBarrelTimes(): void {\r\n    Object.keys(this.scores).forEach((key) => {\r\n      if (\r\n        this.scores[key].barrel >= this.qtyOfPlayers ||\r\n        this.scores[key].barrel >= 3\r\n      ) {\r\n        let acc = 0;\r\n        this.roundMembers\r\n          .find((roundMember) => roundMember._id === key)\r\n          .namedScoresLine.map((namedScore: NamedScore) => {\r\n            acc = namedScore.value + acc;\r\n          });\r\n\r\n        if (acc + this.scores[key].value < 1000) {\r\n          this.scores[key].value = this.customRoundNumber(acc) - 100 - acc;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  checkOnFinishGame(): boolean {\r\n    let isFinishGame = false;\r\n    Object.keys(this.scores).forEach((key) => {\r\n      let acc = 0;\r\n      this.roundMembers\r\n        .find((roundMember) => roundMember._id === key)\r\n        .namedScoresLine.map((namedScore: NamedScore) => {\r\n          acc = namedScore.value + acc;\r\n        });\r\n      if (acc >= 1000) {\r\n        isFinishGame = true;\r\n      }\r\n    });\r\n    return isFinishGame;\r\n  }\r\n\r\n  checkGetOnBarrelOrWin(): void {\r\n    Object.keys(this.scores).forEach((key) => {\r\n      let acc = 0;\r\n      this.roundMembers\r\n        .find((roundMember) => roundMember._id === key)\r\n        .namedScoresLine.map((namedScore: NamedScore) => {\r\n          acc = namedScore.value + acc;\r\n        });\r\n      acc = acc + this.scores[key].value;\r\n      if (acc > 900 && acc < 1000 && !this.scores[key].barrel) {\r\n        this.scores[key].value = this.scores[key].value - (acc - 900);\r\n      }\r\n      if (acc >= 1000) {\r\n        this.scores[key].value = this.scores[key].value - (acc - 1000);\r\n      }\r\n    });\r\n  }\r\n\r\n  checkOnValueIsNumber() {\r\n    Object.keys(this.scores).forEach((key) => {\r\n      if (typeof this.scores[key].value !== 'number') {\r\n        this.scores[key].value = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  checkOnRoundedValue() {\r\n    Object.keys(this.scores).forEach((key) => {\r\n      if (!this.scores[key].barrel) {\r\n        this.scores[key].value = this.customRoundNumber(this.scores[key].value);\r\n      }\r\n    });\r\n  }\r\n\r\n  storeRoundScores(): void {\r\n    this.checkOnValueIsNumber();\r\n    this.checkOnTrippleZero();\r\n    this.checkOnBarrelTimes();\r\n    this.checkGetOnBarrelOrWin();\r\n    this.checkOnRoundedValue();\r\n    this.gamesService.storeRoundScores(this.scores);\r\n  }\r\n\r\n  private customRoundNumber(n: number): number {\r\n    const int = Math.floor(n);\r\n    return int % 10 <= 5 ? Math.floor(int / 10) * 10 : Math.ceil(int / 10) * 10;\r\n  }\r\n}\r\n","import { Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { UID } from 'src/app/interfaces';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RoundCars, ROUND_COMPONENT } from '../../round-interfaces';\r\nimport { RoundScoresLineDirective } from '../../round.directive';\r\n\r\n@Component({\r\n  selector: 'app-round-cars',\r\n  templateUrl: './round-cars.component.html',\r\n  styleUrls: ['./round-cars.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: ROUND_COMPONENT,\r\n      useExisting: RoundCarsComponent,\r\n    },\r\n  ],\r\n})\r\nexport class RoundCarsComponent extends RoundScoresLineDirective implements OnInit, RoundCars {\r\n  // @Input() playerId: UID;\r\n  // @Input() roundId: string;\r\n\r\n  carsScoresEnv = environment.games.train.carsScores;\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  calcQtyOfArrItems(item: string | number) {\r\n    return this.sharedService.calcQtyOfArrItems(item, this.playerId, this.roundId);\r\n  }\r\n\r\n  // addToScoresLine(score: number): void {\r\n  //   this.sharedService.addToScoresLine(score, this.playerId, this.roundId);\r\n  // }\r\n\r\n  // removeFromScoresLine(score: number): void {\r\n  //   this.sharedService.removeFromScoresLine(score, this.playerId, this.roundId);\r\n  // }\r\n}\r\n","import { Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { RoundMember, UID } from 'src/app/interfaces';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RoundLongest } from '../../round-interfaces';\r\nimport { ROUND_COMPONENT } from '../../round-interfaces';\r\nimport { RoundBaseDirective } from '../../round.directive';\r\n\r\n@Component({\r\n  selector: 'app-round-length',\r\n  templateUrl: './round-length.component.html',\r\n  styleUrls: ['./round-length.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: ROUND_COMPONENT,\r\n      useExisting: RoundLengthComponent,\r\n    },\r\n  ],\r\n})\r\nexport class RoundLengthComponent extends RoundBaseDirective implements OnInit, RoundLongest {\r\n  // @Input() playerId: UID;\r\n  // @Input() roundId: string;\r\n\r\n  longestRouteScoreEnv = environment.games.train.longestRouteScore;\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  // getMemberByPlayerId(): RoundMember {\r\n  //   return super.sharedService.getMemberByPlayerId(this.playerId, this.roundId);\r\n  // }\r\n\r\n  onMarkLongestHandler(e: any) {\r\n    const checked = e.target.checked;\r\n    if (checked) {\r\n      this.setScoresLine([this.longestRouteScoreEnv], this.playerId, this.roundId);\r\n    } else {\r\n      this.setScoresLine([], this.playerId, this.roundId);\r\n    }\r\n  }\r\n}\r\n","import { Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { UID } from 'src/app/interfaces';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Inverse, RoundRoutes } from '../../round-interfaces';\r\nimport { RoundScoresLineDirective } from '../../round.directive';\r\nimport { ROUND_COMPONENT } from '../../round-interfaces';\r\n\r\n@Component({\r\n  selector: 'app-round-routes',\r\n  templateUrl: './round-routes.component.html',\r\n  styleUrls: ['./round-routes.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: ROUND_COMPONENT,\r\n      useExisting: RoundRoutesComponent,\r\n    },\r\n  ],\r\n})\r\nexport class RoundRoutesComponent extends RoundScoresLineDirective implements OnInit, RoundRoutes {\r\n  @Input() playerId: UID;\r\n  @Input() roundId: string;\r\n\r\n  routesScoresEnv = environment.games.train.routesScores;\r\n  inverse: Inverse = 1;\r\n  numberFn = Number;\r\n\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  inverseScore() {\r\n    this.inverse = (this.inverse * -1) as Inverse;\r\n  }\r\n}\r\n","import { Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { RoundMember, UID } from 'src/app/interfaces';\r\nimport { SharedService } from 'src/app/services/shared.service';\r\nimport { ROUND_COMPONENT } from '../../round-interfaces';\r\nimport { RoundBaseDirective } from '../../round.directive';\r\n\r\n@Component({\r\n  selector: 'app-round-stations',\r\n  templateUrl: './round-stations.component.html',\r\n  styleUrls: ['./round-stations.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: ROUND_COMPONENT,\r\n      useExisting: RoundStationsComponent,\r\n    },\r\n  ],\r\n})\r\nexport class RoundStationsComponent extends RoundBaseDirective implements OnInit {\r\n  // @Input() playerId: UID;\r\n  // @Input() roundId: string;\r\n\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  calcScores(): number {\r\n    return this.getMemberByPlayerId().scoresLine.reduce((prev, cur) => prev + cur, 0);\r\n  }\r\n}\r\n","import { Component, Injector, OnInit } from '@angular/core';\r\nimport { NamedScore } from 'src/app/interfaces';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ROUND_COMPONENT } from '../../round-interfaces';\r\nimport { RoundBaseDirective, RoundScoresLineDirective } from '../../round.directive';\r\n\r\n@Component({\r\n  selector: 'app-round-uno',\r\n  templateUrl: './round-uno.component.html',\r\n  styleUrls: ['./round-uno.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: ROUND_COMPONENT,\r\n      useExisting: RoundUnoComponent,\r\n    },\r\n  ],\r\n})\r\nexport class RoundUnoComponent extends RoundScoresLineDirective implements OnInit {\r\n  namedScoresEnv = environment.games.uno.namedScores;\r\n  namedScoreLine: NamedScore[] = [];\r\n\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  ngOnInit() {}\r\n}\r\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>{{ data?.title | translate }}?</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"cancel()\\\">{{\\n        'elements.button.close' | translate\\n      }}</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <div class=\\\"finish-game-modal\\\">\\n    <div class=\\\"finish-game-modal__text\\\">\\n      <p class=\\\"ion-padding-horizontal\\\">\\n        {{ data?.text | translate }}\\n      </p>\\n    </div>\\n    <div class=\\\"finish-game-modal__buttons\\\">\\n      <ion-grid>\\n        <ion-row>\\n          <ion-col size=\\\"7\\\">\\n            <ion-button (click)=\\\"cancel()\\\" expand=\\\"block\\\">{{\\n              data?.cancelBtnText | translate\\n            }}</ion-button>\\n          </ion-col>\\n          <ion-col size=\\\"5\\\">\\n            <ion-button (click)=\\\"confirm()\\\" fill=\\\"outline\\\" expand=\\\"block\\\">{{\\n              data?.confirmBtnText | translate\\n            }}</ion-button></ion-col\\n          >\\n        </ion-row>\\n      </ion-grid>\\n    </div>\\n  </div>\\n</ion-content>\\n\";","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-menu-button menu=\\\"games-menu\\\"></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-segment\\r\\n      *ngIf=\\\"showToolbarMenu\\\"\\r\\n      scrollable\\r\\n      [value]=\\\"(activeRoundId$ | async)\\\"\\r\\n      (ionChange)=\\\"onMenuClickHandler($event)\\\"\\r\\n    >\\r\\n      <ion-segment-button\\r\\n        *ngFor=\\\"let round of roundsCfg; let idx = index\\\"\\r\\n        [value]=\\\"round._id\\\"\\r\\n        [disabled]=\\\"(round._id === 'start' && (rounds$ | async).length) ||\\r\\n                    (round._id !== 'start' && (rounds$ | async).length === 0)\\\"\\r\\n      >\\r\\n        <ion-icon [name]=\\\"round.icon\\\"></ion-icon>\\r\\n      </ion-segment-button>\\r\\n    </ion-segment>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n  <ion-grid class=\\\"ion-no-margin ion-no-padding\\\">\\r\\n    <ion-row>\\r\\n      <ion-col\\r\\n        size-lg=\\\"6\\\"\\r\\n        size-md=\\\"8\\\"\\r\\n        size-sm=\\\"10\\\"\\r\\n        offset-lg=\\\"3\\\"\\r\\n        offset-md=\\\"2\\\"\\r\\n        offset-sm=\\\"1\\\"\\r\\n      >\\r\\n\\r\\n        <ion-card *ngIf=\\\"(rounds$ | async).length !== 0\\\">\\r\\n          <ion-card-header>\\r\\n            <ion-card-title class=\\\"ion-text-center\\\"\\r\\n              >{{'games.' + gameType + '.name' | translate}}</ion-card-title\\r\\n            >\\r\\n          </ion-card-header>\\r\\n          <ion-card-content>\\r\\n            <ion-list>\\r\\n              <ion-item\\r\\n                *ngFor=\\\"let player of playersWithTotal\\\"\\r\\n                (click)=\\\"selectPlayer(player._id)\\\"\\r\\n                [ngClass]=\\\"{'active-player': player._id === (activePlayerId$ | async) && gameType !== 'thousand'}\\\"\\r\\n              >\\r\\n                <ion-label\\r\\n                  [ngStyle]=\\\"{\\r\\n                  'border-left': '6px solid ' + player.color,\\r\\n                  'padding-left': '10px'\\r\\n                }\\\"\\r\\n                >\\r\\n                  {{player.name}}\\r\\n                </ion-label>\\r\\n                <div\\r\\n                  slot=\\\"end\\\"\\r\\n                  [ngStyle]=\\\"{\\r\\n                  'border-right': '6px solid ' + player.color,\\r\\n                  'padding-right': '10px'\\r\\n                }\\\"\\r\\n                >\\r\\n                  {{getPlayerTotalScores(player._id)}}\\r\\n                </div>\\r\\n              </ion-item>\\r\\n            </ion-list>\\r\\n            <ion-row class=\\\"ion-justify-content-around\\\">\\r\\n              <ion-button\\r\\n                *ngIf=\\\"gameType !== 'thousand'\\\"\\r\\n                fill=\\\"outline\\\"\\r\\n                size=\\\"small\\\"\\r\\n                (click)=\\\"onFinishGameHandler()\\\"\\r\\n                [disabled]=\\\"(rounds$ | async).length === 0 || (loading$ | async) ||\\r\\n              (gameType === 'rummy' && finishGameDisabled(playersWithTotal))\\\"\\r\\n              >\\r\\n                {{'elements.button.finishGame' | translate}}\\r\\n              </ion-button>\\r\\n              <ion-button\\r\\n                fill=\\\"outline\\\"\\r\\n                size=\\\"small\\\"\\r\\n                [disabled]=\\\"(rounds$ | async).length === 0 || (loading$ | async)\\\"\\r\\n                (click)=\\\"onCancelGameHandler()\\\"\\r\\n              >\\r\\n                {{'elements.button.cancelGame' | translate}}\\r\\n              </ion-button>\\r\\n              <ion-button\\r\\n                *ngIf=\\\"gameType === 'uno'\\\"\\r\\n                fill=\\\"outline\\\"\\r\\n                size=\\\"small\\\"\\r\\n                (click)=\\\"openNextRound()\\\"\\r\\n              >\\r\\n                {{'elements.button.nextRound' | translate}}\\r\\n              </ion-button>\\r\\n            </ion-row>\\r\\n          </ion-card-content>\\r\\n        </ion-card>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n\\r\\n    <ion-row\\r\\n      *ngIf=\\\"(activeRoundId$ | async) === 'start' || ((activeRoundId$ | async) && (activePlayerId$ | async))\\\"\\r\\n    >\\r\\n      <ion-col\\r\\n        size-lg=\\\"8\\\"\\r\\n        size-md=\\\"10\\\"\\r\\n        size-sm=\\\"12\\\"\\r\\n        offset-lg=\\\"2\\\"\\r\\n        offset-md=\\\"1\\\"\\r\\n        offset-sm=\\\"0\\\"\\r\\n      >\\r\\n        <app-round\\r\\n          [activeRoundId$]=\\\"activeRoundId$\\\"\\r\\n          [activePlayerId$]=\\\"activePlayerId$\\\"\\r\\n          [gameType$]=\\\"gameType$\\\"\\r\\n          [players$]=\\\"players$\\\"\\r\\n        ></app-round>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n\\r\\n  <!-- <ion-modal trigger=\\\"open-modal\\\" (willDismiss)=\\\"onWillDismiss($event)\\\">\\r\\n    <ng-template>\\r\\n      <ion-header>\\r\\n        <ion-toolbar>\\r\\n          <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-button (click)=\\\"cancel()\\\">Cancel</ion-button>\\r\\n          </ion-buttons>\\r\\n          <ion-title>Cancel game?</ion-title>\\r\\n          <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button (click)=\\\"confirm()\\\" [strong]=\\\"true\\\">Confirm</ion-button>\\r\\n          </ion-buttons>\\r\\n        </ion-toolbar>\\r\\n      </ion-header>\\r\\n      <ion-content class=\\\"ion-padding\\\">\\r\\n\\r\\n      </ion-content>\\r\\n    </ng-template>\\r\\n  </ion-modal> -->\\r\\n</ion-content>\\r\\n\";","export default \"<ion-card>\\r\\n  <ion-card-header>\\r\\n    <ion-card-title class=\\\"ion-text-center\\\">{{\\r\\n      'modules.games.addPlayers' | translate\\r\\n    }}</ion-card-title>\\r\\n    <ion-card-subtitle class=\\\"ion-text-center\\\">{{'games.' + gameType + '.name' | translate}}</ion-card-subtitle>\\r\\n  </ion-card-header>\\r\\n  <ion-card-content class=\\\"choose-players\\\">\\r\\n    <ion-list class=\\\"choose-players__list\\\">\\r\\n      <ion-item-sliding *ngFor=\\\"let player of players$ | async; let index = index\\\" lines=\\\"none\\\">\\r\\n        <ion-item lines=\\\"none\\\">\\r\\n          <div class=\\\"players-list\\\">\\r\\n            <div class=\\\"players-list__color\\\">\\r\\n              <div\\r\\n                class=\\\"select-color\\\"\\r\\n                (click)=\\\"filtredColors.length > 1 ? showSelectColorPopup($event, index) : null\\\"\\r\\n                [ngStyle]=\\\"{ 'background-color': player?.color }\\\"\\r\\n              ></div>\\r\\n            </div>\\r\\n            <div class=\\\"players-list__info\\\">\\r\\n              <ion-item>\\r\\n                <ion-select\\r\\n                  placeholder=\\\"Select One\\\"\\r\\n                  [value]=\\\"player\\\"\\r\\n                  interface=\\\"popover\\\"\\r\\n                  (ionChange)=\\\"choosePlayerHandler($event, index)\\\"\\r\\n                  slot=\\\"end\\\"\\r\\n                >\\r\\n                  <ion-select-option [value]=\\\"player\\\">\\r\\n                    {{ player.name }}\\r\\n                  </ion-select-option>\\r\\n                  <ion-select-option\\r\\n                    *ngFor=\\\"let filtredGamer of filtredGamers\\\"\\r\\n                    [value]=\\\"filtredGamer\\\"\\r\\n                  >\\r\\n                    {{ filtredGamer.name }}\\r\\n                  </ion-select-option>\\r\\n                </ion-select>\\r\\n                <ion-note slot=\\\"end\\\" color=\\\"danger\\\">\\r\\n                  <ion-icon name=\\\"trash-outline\\\"></ion-icon>\\r\\n                  <ion-icon name=\\\"caret-back-outline\\\"></ion-icon>\\r\\n                </ion-note>\\r\\n              </ion-item>\\r\\n            </div>\\r\\n          </div>\\r\\n        </ion-item>\\r\\n\\r\\n        <ion-item-options side=\\\"end\\\">\\r\\n          <ion-item-option color=\\\"danger\\\" (click)=\\\"removePlayerHandler(player._id)\\\">{{\\r\\n            'elements.button.remove' | translate\\r\\n          }}</ion-item-option>\\r\\n        </ion-item-options>\\r\\n      </ion-item-sliding>\\r\\n    </ion-list>\\r\\n    <ion-row class=\\\"choose-players__btn-block\\\">\\r\\n      <ion-col>\\r\\n        <ion-button\\r\\n          expand=\\\"block\\\"\\r\\n          fill=\\\"outline\\\"\\r\\n          size=\\\"small\\\"\\r\\n          color=\\\"secondary\\\"\\r\\n          (click)=\\\"addPlayerHandler()\\\"\\r\\n          [disabled]=\\\"players.length >= environment.games[gameType]?.maxPlayersQty\\\"\\r\\n        >\\r\\n          {{ 'elements.button.add' | translate }}\\r\\n        </ion-button>\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        <ion-button\\r\\n          expand=\\\"block\\\"\\r\\n          fill=\\\"outline\\\"\\r\\n          size=\\\"small\\\"\\r\\n          color=\\\"success\\\"\\r\\n          (click)=\\\"showCreateGamerPopup($event)\\\"\\r\\n        >\\r\\n          {{ 'elements.button.create' | translate }}\\r\\n        </ion-button>\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        <ion-button\\r\\n          expand=\\\"block\\\"\\r\\n          fill=\\\"outline\\\"\\r\\n          size=\\\"small\\\"\\r\\n          color=\\\"danger\\\"\\r\\n          (click)=\\\"removeAllPlayersHandler()\\\"\\r\\n        >\\r\\n          {{ 'elements.button.removeAll' | translate }}\\r\\n        </ion-button>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n    <ion-row class=\\\"choose-players__btn-block\\\">\\r\\n      <ion-col>\\r\\n        <ion-button\\r\\n          expand=\\\"block\\\"\\r\\n          (click)=\\\"startGameHandler()\\\"\\r\\n          [disabled]=\\\"\\r\\n            players.length < 2 || players.length > environment.games[gameType]?.maxPlayersQty\\r\\n          \\\"\\r\\n        >\\r\\n          {{ 'elements.button.startGame' | translate }}\\r\\n        </ion-button>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-card-content>\\r\\n</ion-card>\\r\\n\\r\\n<!-- </ion-col>\\r\\n  </ion-row>\\r\\n</ion-grid> -->\\r\\n\";","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>{{'modules.games.createGamer' | translate}}</ion-title>\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-button (click)=\\\"dismiss()\\\">\\r\\n        {{'elements.button.close' | translate}}\\r\\n      </ion-button>\\r\\n    </ion-buttons>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <ion-card>\\r\\n    <ion-card-content>\\r\\n      <ion-list>\\r\\n\\r\\n        <ion-item lines=\\\"none\\\">\\r\\n          <div class=\\\"players-list\\\">\\r\\n            <div class=\\\"players-list__color\\\">\\r\\n              <div class=\\\"select-color\\\" (click)=\\\"showSelectColorPopup($event)\\\"\\r\\n                [ngStyle]=\\\"{'background-color' : color }\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"players-list__info\\\">\\r\\n              <ion-item>\\r\\n                <ion-input [placeholder]=\\\"'modules.user.name' | translate\\\"\\r\\n                 clearInput [(ngModel)]=\\\"name\\\"></ion-input>\\r\\n              </ion-item>\\r\\n            </div>\\r\\n          </div>\\r\\n        </ion-item>\\r\\n      </ion-list>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-button expand=\\\"block\\\" (click)=\\\"onCreate()\\\" [disabled]=\\\"!name\\\">\\r\\n            {{'elements.button.create' | translate}}\\r\\n          </ion-button>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n</ion-content>\";","export default \"<ion-card>\\r\\n  <ion-card-content>\\r\\n    <ion-grid>\\r\\n      <ion-row class=\\\"select-color\\\">\\r\\n        <ion-col class=\\\"select-color__container\\\" *ngFor=\\\"let color of colors\\\" (click)=\\\"onSelect(color)\\\">\\r\\n          <div class=\\\"select-color__item\\\" [ngStyle]=\\\"{'background-color' : color }\\\"></div>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n  </ion-card-content>\\r\\n</ion-card>\";","export default \"<ion-card>\\r\\n  <ion-card-header [ngStyle]=\\\"{'border-bottom': '2px solid ' + getPlayerColor()}\\\">\\r\\n    <!-- <ion-card-subtitle>\\r\\n      <span class=\\\"round-subtitle\\\">\\r\\n        <ion-icon class=\\\"round-subtitle__icon\\\" color=\\\"primary\\\" [name]=getRoundById()?.icon></ion-icon>\\r\\n        <span class=\\\"ion-text-capitalize round-subtitle__text\\\">\\r\\n          {{'games.' + (gameType$ | async) + '.' + getRoundById()?.name | translate}} {{getRoundById()?.namePostfix}}\\r\\n        </span>\\r\\n        <span class=\\\"round-subtitle__blank\\\"></span>\\r\\n        <span>{{calcScores()}}</span>\\r\\n      </span>\\r\\n    </ion-card-subtitle> -->\\r\\n    <ion-card-title class=\\\"ion-text-center\\\">\\r\\n      <ion-row>\\r\\n        <ion-col *ngFor=\\\"let player of (players$ | async)\\\">\\r\\n         <ion-text>{{player.name}}</ion-text>\\r\\n        </ion-col>\\r\\n\\r\\n      </ion-row>\\r\\n\\r\\n    </ion-card-title>\\r\\n  </ion-card-header>\\r\\n  <ng-content></ng-content>\\r\\n</ion-card>\";","export default \"<ion-card>\\r\\n  <ion-card-header [ngStyle]=\\\"{'border-bottom': '2px solid ' + getPlayerColor()}\\\">\\r\\n    <ion-card-subtitle>\\r\\n      <span class=\\\"round-subtitle\\\">\\r\\n        <ion-icon class=\\\"round-subtitle__icon\\\" color=\\\"primary\\\" [name]=getRoundById()?.icon></ion-icon>\\r\\n        <span *ngIf=\\\"(gameType$ | async) !== 'rummy'\\\" class=\\\"ion-text-capitalize round-subtitle__text\\\">\\r\\n          {{'games.' + (gameType$ | async) + '.' + getRoundById()?.name | translate}} {{getRoundById()?.namePostfix}}\\r\\n        </span>\\r\\n\\r\\n        <span class=\\\"round-subtitle__blank\\\"></span>\\r\\n        <span>{{calcScores()}}</span>\\r\\n      </span>\\r\\n    </ion-card-subtitle>\\r\\n    <ion-card-title class=\\\"ion-text-center\\\">{{getPlayerName()}}</ion-card-title>\\r\\n  </ion-card-header>\\r\\n  <ng-content></ng-content>\\r\\n</ion-card>\";","export default \"<app-choose-players\\r\\n  *ngIf=\\\"(activeRoundId$ | async) === 'start' && (rounds$ | async).length === 0; else restRounds\\\"\\r\\n>\\r\\n</app-choose-players>\\r\\n<ng-template #restRounds>\\r\\n  <!-- Ticket to ride -->\\r\\n  <app-round-wrapper\\r\\n    *ngIf=\\\"(gameType$ | async) === 'train'\\\"\\r\\n    [ngSwitch]=\\\"activeRoundId$ | async\\\"\\r\\n    [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n    [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n  >\\r\\n    <app-round-routes\\r\\n      *ngSwitchCase=\\\"'routes'\\\"\\r\\n      [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n      [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n    ></app-round-routes>\\r\\n    <app-round-length\\r\\n      *ngSwitchCase=\\\"'length'\\\"\\r\\n      [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n      [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n    ></app-round-length>\\r\\n    <app-round-stations\\r\\n      *ngSwitchCase=\\\"'stations'\\\"\\r\\n      [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n      [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n    ></app-round-stations>\\r\\n    <app-round-cars\\r\\n      *ngSwitchCase=\\\"'cars'\\\"\\r\\n      [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n      [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n    >\\r\\n    </app-round-cars>\\r\\n  </app-round-wrapper>\\r\\n  <!-- Uno -->\\r\\n  <app-round-wrapper\\r\\n    *ngIf=\\\"(gameType$ | async) === 'uno'\\\"\\r\\n    [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n    [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n  >\\r\\n    <app-round-uno [roundId]=\\\"activeRoundId$ | async\\\" [playerId]=\\\"activePlayerId$ | async\\\">\\r\\n    </app-round-uno>\\r\\n  </app-round-wrapper>\\r\\n  <!-- Rummy -->\\r\\n  <app-round-wrapper\\r\\n    *ngIf=\\\"(gameType$ | async) === 'rummy'\\\"\\r\\n    [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n    [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n  >\\r\\n    <app-round-rummy [roundId]=\\\"activeRoundId$ | async\\\" [playerId]=\\\"activePlayerId$ | async\\\">\\r\\n    </app-round-rummy>\\r\\n  </app-round-wrapper>\\r\\n  <!-- Thousand -->\\r\\n  <app-round-t-wrapper\\r\\n    *ngIf=\\\"(gameType$ | async) === 'thousand'\\\"\\r\\n    [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n    [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n  >\\r\\n    <app-round-thousand\\r\\n      [roundId]=\\\"activeRoundId$ | async\\\"\\r\\n      [playerId]=\\\"activePlayerId$ | async\\\"\\r\\n    ></app-round-thousand>\\r\\n    <!-- <app-round-thousand *ngFor=\\\"let round of (rounds$ | async)\\\" [roundId]=\\\"round._id\\\" [round]=\\\"round\\\"\\r\\n      [playerId]=\\\"(activePlayerId$ | async)\\\"></app-round-thousand> -->\\r\\n  </app-round-t-wrapper>\\r\\n</ng-template>\\r\\n\";","export default \"<ion-card-content>\\r\\n  <ion-row class=\\\"round round_tools\\\">\\r\\n    <ion-col *ngFor=\\\"let namedScore of namedScoresEnv\\\" size=\\\"2.4\\\">\\r\\n      <!-- <img class=\\\"uno-round-img\\\" [src]=\\\"namedScore.picture\\\" [alt]=\\\"namedScore.name\\\"\\r\\n      (click)=\\\"addToNamedScoresLine(namedScore)\\\"> -->\\r\\n\\r\\n      <ion-chip  (click)=\\\"addToNamedScoresLine(namedScore)\\\">\\r\\n        <ion-label>{{namedScore.name}}</ion-label>\\r\\n      </ion-chip>\\r\\n    </ion-col>\\r\\n    <!-- <ion-col size=\\\"3\\\">\\r\\n      <ion-chip [color]=\\\"'danger'\\\" (click)=\\\"inverseScore()\\\">\\r\\n        <ion-icon name=\\\"add-outline\\\"></ion-icon>\\r\\n        <ion-icon name=\\\"remove-outline\\\"></ion-icon>\\r\\n      </ion-chip>\\r\\n    </ion-col> -->\\r\\n  </ion-row>\\r\\n  <ion-row class=\\\"round round_result\\\">\\r\\n    <ion-col *ngFor=\\\"let namedScore of getMemberByPlayerId()?.namedScoresLine\\\" size=\\\"1\\\">\\r\\n      <!-- <img [src]=\\\"namedScore.picture\\\" [alt]=\\\"namedScore.name\\\" (click)=\\\"removeFromNamedScoresLine(namedScore)\\\"> -->\\r\\n\\r\\n      <ion-chip outline [color]=\\\"'secondary'\\\" (click)=\\\"removeFromNamedScoresLine(namedScore)\\\">\\r\\n        <ion-label>{{namedScore.name }}</ion-label>\\r\\n        <ion-icon name=\\\"close-circle\\\"></ion-icon>\\r\\n\\r\\n      </ion-chip>\\r\\n\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-card-content>\";","export default \"<ion-card-content>\\r\\n  <ng-container class=\\\"round round_result\\\">\\r\\n    <ion-row>\\r\\n      <ion-col size=\\\"12\\\">\\r\\n        <ion-button (click)=\\\"storeRoundScores()\\\" expand=\\\"block\\\"> {{'elements.button.submit' | translate}} </ion-button>\\r\\n      </ion-col>\\r\\n      <ion-col\\r\\n        *ngFor=\\\"let roundMember of roundMembers$ | async; let i = index\\\"\\r\\n        [size]=\\\"12 / qtyOfPlayers\\\"\\r\\n      >\\r\\n        <div\\r\\n          [ngClass]=\\\"\\r\\n            roundMember._id === activeRoundMemberId\\r\\n              ? { 'active-item': true }\\r\\n              : { 'regular-item': true }\\r\\n          \\\"\\r\\n        ></div>\\r\\n        <div class=\\\"round-btn-block\\\">\\r\\n          <ion-button\\r\\n            class=\\\"round-btn-block__item\\\"\\r\\n            size=\\\"small\\\"\\r\\n            (click)=\\\"changeScoresState(roundMember._id, 'r')\\\"\\r\\n            color=\\\"secondary\\\"\\r\\n            [fill]=\\\"scores[roundMember._id]?.name !== 'r' ? 'solid' : 'outline'\\\"\\r\\n            [disabled]=\\\"\\r\\n              scores[roundMember._id]?.disabled.includes('r') ||\\r\\n              scores[roundMember._id].barrel > 0 ||\\r\\n              (roundMember._id === activeRoundMemberId && qtyOfPlayers === 4)\\r\\n            \\\"\\r\\n            >R</ion-button\\r\\n          >\\r\\n          <ion-button\\r\\n            class=\\\"round-btn-block__item\\\"\\r\\n            size=\\\"small\\\"\\r\\n            (click)=\\\"changeScoresState(roundMember._id, 's')\\\"\\r\\n            color=\\\"secondary\\\"\\r\\n            [fill]=\\\"scores[roundMember._id]?.name !== 's' ? 'solid' : 'outline'\\\"\\r\\n            [disabled]=\\\"\\r\\n              scores[roundMember._id]?.disabled.includes('s') ||\\r\\n              scores[roundMember._id].barrel > 0 ||\\r\\n              (roundMember._id === activeRoundMemberId && qtyOfPlayers === 4)\\r\\n            \\\"\\r\\n            >S</ion-button\\r\\n          >\\r\\n        </div>\\r\\n        <ion-item class=\\\"thousand-score-input\\\">\\r\\n          <ion-input\\r\\n            type=\\\"number\\\"\\r\\n            placeholder=\\\"0\\\"\\r\\n            [(ngModel)]=\\\"scores[roundMember._id].value\\\"\\r\\n          ></ion-input>\\r\\n        </ion-item>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n    <ion-row>\\r\\n      <ion-col\\r\\n        *ngFor=\\\"let roundMember of addTotals(roundMembers$ | async)\\\"\\r\\n        [size]=\\\"12 / qtyOfPlayers\\\"\\r\\n      >\\r\\n        <ion-item\\r\\n          class=\\\"thousand-score__wrapper\\\"\\r\\n          [lines]=\\\"\\r\\n            (roundMember.namedScoresLine.length - i - 1) % qtyOfPlayers === 0 ? 'full' : 'none'\\r\\n          \\\"\\r\\n          *ngFor=\\\"let score of roundMember.namedScoresLine.slice().reverse(); let i = index\\\"\\r\\n        >\\r\\n          <ion-text\\r\\n            class=\\\"thousand-score__current\\\"\\r\\n            [color]=\\\"i <= 1 && scores[roundMember._id].doubleZero ? 'danger' : ''\\\"\\r\\n            >{{ score.name === 'r' || score.name === 's' ? score.name.toUpperCase() : score.value }}</ion-text\\r\\n          >\\r\\n          <div style=\\\"width: 100%\\\"></div>\\r\\n          <ion-text\\r\\n            class=\\\"thousand-score__total\\\"\\r\\n            [ngClass]=\\\"{ 'thousand-score__total_last': i === 0 }\\\"\\r\\n            [color]=\\\"\\r\\n              score.total >= 900 &&\\r\\n              score.total < 1000 &&\\r\\n              scores[roundMember._id].barrel &&\\r\\n              i < qtyOfPlayers\\r\\n                ? 'danger'\\r\\n                : ''\\r\\n            \\\"\\r\\n            >{{ score.total }}</ion-text\\r\\n          >\\r\\n        </ion-item>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ng-container>\\r\\n</ion-card-content>\\r\\n\";","export default \"<ion-card-content>\\r\\n  <ion-row *ngFor=\\\"let car of carsScoresEnv\\\" class=\\\"round round_tools\\\">\\r\\n    <ion-col class=\\\"round_tools__score\\\">\\r\\n      <ion-label>{{calcQtyOfArrItems(car.value)}}</ion-label>\\r\\n    </ion-col>\\r\\n    <ion-col class=\\\"round_tools__btn\\\">\\r\\n      <div class=\\\"incDecBtn\\\">\\r\\n        <ion-button shape=\\\"round\\\" color=\\\"danger\\\" fill=\\\"outline\\\" (click)=\\\"removeFromScoresLine(car.value)\\\">\\r\\n          <ion-icon name=\\\"remove-outline\\\"></ion-icon>\\r\\n        </ion-button>\\r\\n        <span class=\\\"incDecBtn__caption\\\">\\r\\n          <ion-icon name=\\\"train-outline\\\"></ion-icon>\\r\\n          {{car.name}}\\r\\n        </span>\\r\\n        <ion-button shape=\\\"round\\\" color=\\\"success\\\" fill=\\\"outline\\\" (click)=\\\"addToScoresLine(car.value)\\\">\\r\\n          <ion-icon name=\\\"add-outline\\\"></ion-icon>\\r\\n        </ion-button>\\r\\n      </div>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-card-content>\";","export default \"<ion-card-content>\\r\\n  <ion-row>\\r\\n    <ion-col class=\\\"round round_tools\\\">\\r\\n      <div>{{'games.train.longestRoute' | translate}}</div>\\r\\n      <ion-toggle [checked]=\\\"getMemberByPlayerId()?.scoresLine.length\\\"\\r\\n        (ionChange)=\\\"onMarkLongestHandler($event)\\\">\\r\\n      </ion-toggle>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-card-content>\";","export default \"<ion-card-content>\\r\\n  <ion-row class=\\\"round round_tools\\\">\\r\\n    <ion-col *ngFor=\\\"let routeScore of routesScoresEnv\\\" size=\\\"3\\\">\\r\\n      <ion-chip [color]=\\\"routeScore.value > 19 ? 'secondary' : 'warning'\\\"\\r\\n        (click)=\\\"addToNamedScoresLine({value: routeScore.value * inverse, name: (numberFn(routeScore.name) * inverse) + '' })\\\">\\r\\n        <ion-label>{{routeScore.value * inverse}}</ion-label>\\r\\n      </ion-chip>\\r\\n    </ion-col>\\r\\n    <ion-col size=\\\"3\\\">\\r\\n      <ion-chip [color]=\\\"'danger'\\\" (click)=\\\"inverseScore()\\\">\\r\\n        <ion-icon name=\\\"add-outline\\\"></ion-icon>\\r\\n        <ion-icon name=\\\"remove-outline\\\"></ion-icon>\\r\\n      </ion-chip>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n  <ion-row class=\\\"round round_result\\\">\\r\\n    <ion-col *ngFor=\\\"let routeScore of getMemberByPlayerId().namedScoresLine\\\" size=\\\"3\\\">\\r\\n      <ion-chip outline [color]=\\\"routeScore.value > 19 ? 'secondary' : routeScore.value < 0 ? 'danger' : 'warning'\\\"\\r\\n        (click)=\\\"removeFromNamedScoresLine({value: routeScore.value, name: routeScore.name})\\\">\\r\\n        <ion-label>{{routeScore.value}}</ion-label>\\r\\n        <ion-icon name=\\\"close-circle\\\"></ion-icon>\\r\\n      </ion-chip>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-card-content>\";","export default \"<ion-card-content>\\r\\n  <ion-row class=\\\"round round_tools\\\">\\r\\n    <ion-col class=\\\"round_tools__score\\\">\\r\\n      <ion-label>{{ 3 - calcScores() / 4 }}</ion-label>\\r\\n    </ion-col>\\r\\n    <ion-col class=\\\"round_tools__btn\\\">\\r\\n      <div class=\\\"incDecBtn\\\">\\r\\n        <ion-button shape=\\\"round\\\" color=\\\"danger\\\" fill=\\\"outline\\\" (click)=\\\"addToScoresLine(4)\\\"\\r\\n          [disabled]=\\\"getMemberByPlayerId().scoresLine.length >= 3\\\">\\r\\n          <ion-icon name=\\\"remove-outline\\\"></ion-icon>\\r\\n        </ion-button>\\r\\n        <span class=\\\"incDecBtn__caption\\\">\\r\\n          <div>{{'games.train.stationsShort' | translate}}</div>\\r\\n        </span>\\r\\n        <ion-button shape=\\\"round\\\" color=\\\"success\\\" fill=\\\"outline\\\" (click)=\\\"removeFromScoresLine(4)\\\"\\r\\n          [disabled]=\\\"getMemberByPlayerId().scoresLine.length <= 0\\\">\\r\\n          <ion-icon name=\\\"add-outline\\\"></ion-icon>\\r\\n        </ion-button>\\r\\n      </div>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-card-content>\";","export default \"<ion-card-content>\\r\\n  <ion-row class=\\\"round round_tools\\\">\\r\\n    <ion-col *ngFor=\\\"let namedScore of namedScoresEnv\\\" size=\\\"2.4\\\">\\r\\n      <img class=\\\"uno-round-img\\\" [src]=\\\"namedScore.picture\\\" [alt]=\\\"namedScore.name\\\"\\r\\n      (click)=\\\"addToNamedScoresLine(namedScore)\\\">\\r\\n\\r\\n      <!-- <ion-chip  (click)=\\\"addToNamedScoresLine(namedScore)\\\">\\r\\n        <ion-label>{{namedScore.name}}</ion-label>\\r\\n      </ion-chip> -->\\r\\n    </ion-col>\\r\\n    <!-- <ion-col size=\\\"3\\\">\\r\\n      <ion-chip [color]=\\\"'danger'\\\" (click)=\\\"inverseScore()\\\">\\r\\n        <ion-icon name=\\\"add-outline\\\"></ion-icon>\\r\\n        <ion-icon name=\\\"remove-outline\\\"></ion-icon>\\r\\n      </ion-chip>\\r\\n    </ion-col> -->\\r\\n  </ion-row>\\r\\n  <ion-row class=\\\"round round_result\\\">\\r\\n    <ion-col *ngFor=\\\"let namedScore of getMemberByPlayerId()?.namedScoresLine\\\" size=\\\"1\\\">\\r\\n      <img [src]=\\\"namedScore.picture\\\" [alt]=\\\"namedScore.name\\\" (click)=\\\"removeFromNamedScoresLine(namedScore)\\\">\\r\\n\\r\\n      <!-- <ion-chip outline [color]=\\\"routeScore > 19 ? 'secondary' : 'warning'\\\" (click)=\\\"removeFromScoresLine(routeScore)\\\">\\r\\n        <ion-label>{{routeScore }}</ion-label>\\r\\n        <ion-icon name=\\\"close-circle\\\"></ion-icon>\\r\\n\\r\\n      </ion-chip> -->\\r\\n\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-card-content>\";"],"names":[],"sourceRoot":"webpack:///"}
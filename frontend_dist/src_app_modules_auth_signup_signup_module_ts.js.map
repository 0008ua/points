{"version":3,"file":"src_app_modules_auth_signup_signup_module_ts.js","mappings":"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","sources":["./src/app/modules/auth/signup/signup-routing.module.ts","./src/app/modules/auth/signup/signup.module.ts","./src/app/modules/auth/signup/signup.page.ts","./src/app/modules/auth/signup/signup.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { SignupPage } from './signup.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SignupPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SignupPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { SignupPageRoutingModule } from './signup-routing.module';\r\n\r\nimport { SignupPage } from './signup.page';\r\nimport { PipesModule } from 'src/app/pipes/pipes.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    PipesModule,\r\n    TranslateModule.forChild({\r\n      extend: true,\r\n    }),\r\n    SignupPageRoutingModule\r\n  ],\r\n  declarations: [SignupPage]\r\n})\r\nexport class SignupPageModule {}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, FormGroupDirective, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Subject } from 'rxjs';\r\nimport { filter, startWith, switchMap, take, tap } from 'rxjs/operators';\r\nimport { IUser } from 'src/app/interfaces';\r\nimport { signup } from 'src/app/store/actions/auth.actions';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.page.html',\r\n  styleUrls: ['./signup.page.scss'],\r\n})\r\nexport class SignupPage implements OnInit {\r\n  @ViewChild('signupFormDirective', { static: false }) signupFormDirective: FormGroupDirective;\r\n\r\n  lang: string;\r\n  signupForm: FormGroup;\r\n  inputType: 'password' | 'text' = 'password';\r\n  formSubmitSubject$ = new Subject();\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    public translate: TranslateService,\r\n    private store: Store,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.lang = this.translate.currentLang;\r\n\r\n    this.signupForm = new FormGroup({\r\n      name: new FormControl(\r\n        '',\r\n        {\r\n          updateOn: 'change',\r\n          validators: [\r\n            Validators.pattern('^[a-zA-Z0-9_\\\\-]+$'),\r\n            Validators.minLength(2),\r\n            Validators.maxLength(60),\r\n            Validators.required,\r\n          ],\r\n          // asyncValidators: [\r\n          //   this.userService.checkLoginUnique(),\r\n          // ],\r\n        }),\r\n      password: new FormControl(\r\n        '',\r\n        {\r\n          updateOn: 'change',\r\n          validators: [\r\n            Validators.pattern('^[a-zA-Z0-9_\\\\-]+$'),\r\n            Validators.minLength(2),\r\n            Validators.maxLength(60),\r\n            Validators.required,\r\n          ],\r\n        }),\r\n      passwordConfirm: new FormControl(\r\n        '',\r\n        {\r\n          updateOn: 'change',\r\n          validators: [\r\n            Validators.pattern('^[a-zA-Z0-9_\\\\-]+$'),\r\n            Validators.minLength(2),\r\n            Validators.maxLength(60),\r\n            Validators.required,\r\n          ],\r\n        }),\r\n      // email: new FormControl(\r\n      //   '',\r\n      //   {\r\n      //     updateOn: 'change',\r\n      //     validators: [\r\n      //       Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$'),\r\n      //       Validators.required,\r\n      //     ],\r\n      //     // asyncValidators: [\r\n      //     //   this.userService.checkEmailUnique(),\r\n      //     // ],\r\n      //   }),\r\n\r\n    }, this.authService.matchPassword,\r\n    );\r\n\r\n    // prevent form submit before async validator completes\r\n    this.formSubmitSubject$\r\n      .pipe(\r\n        tap(() => this.signupForm.markAsDirty()),\r\n        switchMap(() =>\r\n          this.signupForm.statusChanges.pipe(\r\n            startWith(this.signupForm.status),\r\n            filter((status) => status !== 'PENDING'),\r\n            take(1),\r\n          ),\r\n        ),\r\n        filter((status) => status === 'VALID'),\r\n      )\r\n      .subscribe((validationSuccessful) => this.onSignup());\r\n  }\r\n\r\n  switchInputType() {\r\n    if (this.inputType === 'password') {\r\n      this.inputType = 'text';\r\n    } else {\r\n      this.inputType = 'password';\r\n    }\r\n  }\r\n\r\n  onSignup() {\r\n    const user: IUser = {\r\n      name: this.signupForm.get('name').value,\r\n      password: this.signupForm.get('password').value,\r\n    };\r\n\r\n    this.store.dispatch(signup({user}));\r\n    this.resetForm();\r\n  }\r\n\r\n  resetForm() {\r\n    if (this.signupFormDirective) {\r\n      this.signupFormDirective.resetForm();\r\n    }\r\n  }\r\n\r\n  switchLanguage() {\r\n    if (this.lang === 'en') {\r\n      this.lang = 'uk';\r\n    } else {\r\n      this.lang = 'en';\r\n    }\r\n    this.translate.use(this.lang);\r\n  }\r\n}\r\n","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>Scores</ion-title>\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-item (click)=\\\"switchLanguage()\\\" button lines=\\\"none\\\">\\r\\n        <ion-icon name=\\\"earth-outline\\\" slot=\\\"start\\\"></ion-icon>\\r\\n        <ion-label>{{'language' | translate}}</ion-label>\\r\\n      </ion-item>\\r\\n    </ion-buttons>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <form [formGroup]=\\\"signupForm\\\" *ngIf=\\\"signupForm\\\" #signupFormDirective=\\\"ngForm\\\">\\r\\n    <ion-grid>\\r\\n      <ion-row>\\r\\n        <ion-col size-lg=\\\"6\\\" size-md=\\\"8\\\" size-sm=\\\"10\\\" offset-lg=\\\"3\\\" offset-md=\\\"2\\\" offset-sm=\\\"1\\\">\\r\\n          <ion-card>\\r\\n            <ion-card-header>\\r\\n              <div>\\r\\n                <img class=\\\"logo_signin\\\" src=\\\"/assets/banner.svg\\\">\\r\\n              </div>\\r\\n              <ion-card-title class=\\\"ion-text-center\\\">{{'modules.user.signup' | translate}}</ion-card-title>\\r\\n              <ion-card-subtitle class=\\\"ion-text-center\\\">\\r\\n                <a button color=\\\"primary\\\" routerLink=\\\"tabs/signin\\\">{{'modules.user.orSignin' | translate}}</a>\\r\\n              </ion-card-subtitle>\\r\\n            </ion-card-header>\\r\\n            <ion-card-content>\\r\\n              <ion-list>\\r\\n                <ion-item>\\r\\n                  <ion-icon class=\\\"ion-align-self-center\\\" name=\\\"person-outline\\\" slot=\\\"start\\\"></ion-icon>\\r\\n                  <ion-label position=\\\"floating\\\">{{'modules.user.name' | translate}}</ion-label>\\r\\n                  <ion-input type=\\\"text\\\" autocomplete autocorrect formControlName=\\\"name\\\"></ion-input>\\r\\n                </ion-item>\\r\\n                <ng-container *ngIf=\\\"signupForm.get('name').dirty && signupForm.get('name').errors\\\">\\r\\n                  <ion-text *ngFor=\\\"let error of signupForm.get('name').errors | errorExtractor\\\" class=\\\"input-error\\\"\\r\\n                    color=\\\"danger\\\">\\r\\n                    {{'errors.' + error | translate}}\\r\\n                  </ion-text>\\r\\n                </ng-container>\\r\\n\\r\\n                <!-- <ion-item>\\r\\n                  <ion-icon class=\\\"ion-align-self-center\\\" name=\\\"mail-outline\\\" slot=\\\"start\\\"></ion-icon>\\r\\n                  <ion-label position=\\\"floating\\\">{{'modules.user.email' | translate}}</ion-label>\\r\\n                  <ion-input type=\\\"email\\\" autocomplete autocorrect formControlName=\\\"email\\\"></ion-input>\\r\\n                </ion-item>\\r\\n                <ng-container *ngIf=\\\"signupForm.get('email').dirty && signupForm.get('email').errors\\\">\\r\\n                  <ion-text *ngFor=\\\"let error of signupForm.get('email').errors | errorExtractor\\\" class=\\\"input-error\\\"\\r\\n                    color=\\\"danger\\\">\\r\\n                    {{'errors.' + error | translate}}\\r\\n                  </ion-text>\\r\\n                </ng-container> -->\\r\\n\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-icon class=\\\"ion-align-self-center\\\" name=\\\"lock-closed-outline\\\" slot=\\\"start\\\"></ion-icon>\\r\\n                  <ion-label position=\\\"floating\\\">{{'modules.user.password' | translate}}</ion-label>\\r\\n                  <ion-input [type]=\\\"inputType\\\" autocomplete autocorrect formControlName=\\\"password\\\"></ion-input>\\r\\n                  <ion-icon class=\\\"ion-align-self-center\\\"\\r\\n                    [name]=\\\"inputType === 'password' ? 'eye-outline' : 'eye-off-outline'\\\" slot=\\\"end\\\"\\r\\n                    (click)=switchInputType()></ion-icon>\\r\\n                </ion-item>\\r\\n                <ng-container *ngIf=\\\"signupForm.get('password').dirty && signupForm.get('password').errors\\\">\\r\\n                  <ion-text *ngFor=\\\"let error of signupForm.get('password').errors | errorExtractor\\\" class=\\\"input-error\\\"\\r\\n                    color=\\\"danger\\\">\\r\\n                    {{'errors.' + error | translate}}\\r\\n                  </ion-text>\\r\\n                </ng-container>\\r\\n\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-icon class=\\\"ion-align-self-center\\\" name=\\\"reorder-two-outline\\\" slot=\\\"start\\\"></ion-icon>\\r\\n                  <ion-label position=\\\"floating\\\">{{'modules.user.confirmPassword' | translate}}</ion-label>\\r\\n                  <ion-input [type]=\\\"inputType\\\" autocomplete autocorrect formControlName=\\\"passwordConfirm\\\"></ion-input>\\r\\n                  <ion-icon\\r\\n                    *ngIf=\\\"signupForm.get('passwordConfirm').dirty && signupForm.get('passwordConfirm').status === 'VALID'\\\"\\r\\n                    class=\\\"ion-align-self-center\\\" [name]=\\\"'checkmark-done-outline'\\\" color=\\\"success\\\" slot=\\\"end\\\">\\r\\n                  </ion-icon>\\r\\n                </ion-item>\\r\\n                <ng-container\\r\\n                  *ngIf=\\\"signupForm.get('passwordConfirm').dirty && signupForm.get('passwordConfirm').errors\\\">\\r\\n                  <ion-text *ngFor=\\\"let error of signupForm.get('passwordConfirm').errors | errorExtractor\\\"\\r\\n                    class=\\\"input-error\\\" color=\\\"danger\\\">\\r\\n                    {{'errors.' + error | translate}}\\r\\n                  </ion-text>\\r\\n                </ng-container>\\r\\n              </ion-list>\\r\\n            </ion-card-content>\\r\\n          </ion-card>\\r\\n          <ion-row>\\r\\n            <ion-col>\\r\\n              <ion-button expand=\\\"block\\\" [disabled]=\\\"signupForm.status === 'INVALID' || signupForm.status === 'PENDING'\\\"\\r\\n                (click)=\\\"formSubmitSubject$.next()\\\">\\r\\n                {{'modules.user.signup' | translate}}\\r\\n              </ion-button>\\r\\n            </ion-col>\\r\\n          </ion-row>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n  </form>\\r\\n</ion-content>\";"],"names":[],"sourceRoot":"webpack:///"}